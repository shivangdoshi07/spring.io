package com.shivang.secretsharing;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import com.shivang.secretsharing.Interfaces.SecretService;
import com.shivang.secretsharing.pojo.Secret;

import junit.framework.Test;
import junit.framework.TestCase;
import junit.framework.TestSuite;

/**
 * Unit test for simple App.
 */
public class AppTest extends TestCase {
	
	ApplicationContext appContext = new ClassPathXmlApplicationContext(
			new String[] { "beans.xml" });
	SecretService ssc = (SecretService) appContext.getBean("secretserviceProxy");
	
	Secret aliceS = new Secret();
    Secret bobS = new Secret();
    Secret carlS = new Secret();
	/**
	 * Create the test case
	 *
	 * @param testName
	 *            name of the test case
	 */
	public AppTest(String testName) {
		super(testName);
	}
	
	
	
	@Override
	protected void setUp() throws Exception {
		// TODO Auto-generated method stub
		super.setUp();
        ssc.storeSecret("Alice", aliceS);
        ssc.storeSecret("Bob", bobS);
        ssc.storeSecret("Carl", carlS);
	}



	/**
	 * @return the suite of tests being tested
	 */
	public static Test suite() {
		return new TestSuite(AppTest.class);
	}

	/**
	 * Rigourous Test :-)
	 */
	
	public void testA(){
		try{
			ssc.readSecret("Bob", aliceS.getId());
		} catch (Exception e){
			assertTrue(true); // exception is expected
		}
	}
	
	/* Alice shares a secret with Bob, and Bob can read it */
	public void testB(){
		try{
			ssc.shareSecret("Alice", aliceS.getId(), "Bob");
			ssc.readSecret("Bob", aliceS.getId());
		} catch (Exception e){
			assertTrue(false);
		}
	}
	
	/* Alice shares a secret with Bob, and Bob shares Alice’s it with Carl, and Carl can read this secret */
	public void testC(){
		try{
			ssc.shareSecret("Alice", aliceS.getId(), "Bob");
			ssc.shareSecret("Bob", aliceS.getId(), "Carl");
			ssc.readSecret("Carl", aliceS.getId());
		} catch (Exception e){
			assertTrue(false);
		}
	}
	
	/* Alice shares her secret with Bob; Bob shares Carl’s secret with Alice and encounters UnauthorizedException. */
	public void testD(){
		try{
			ssc.shareSecret("Alice", aliceS.getId(), "Bob");
			ssc.shareSecret("Bob", carlS.getId(), "Alice");
		} catch (Exception e){
			assertTrue(true); // exception is expected
		}
	}
	
	/* Alice shares a secret with Bob, Bob shares it with Carl, Alice unshares it with Carl, and Carl cannot read this secret anymore. */
	public void testE(){
		try{
			ssc.shareSecret("Alice", aliceS.getId(), "Bob");
			ssc.shareSecret("Bob", aliceS.getId(), "Carl");
			ssc.unshareSecret("Alice", aliceS.getId(), "Carl");
			ssc.readSecret("Carl", aliceS.getId());
		} catch (Exception e){
			assertTrue(true); // exception is expected
		}
	}
	
	/* Alice shares a secret with Bob and Carl; Carl shares it with Bob, then Alice unshares it with Bob; Bob cannot read this secret anymore */
	public void testG(){
		try{
			ssc.shareSecret("Alice", aliceS.getId(), "Bob");
			ssc.shareSecret("Alice", aliceS.getId(), "Carl");
			ssc.shareSecret("Carl", aliceS.getId(), "Bob");
			ssc.unshareSecret("Alice", aliceS.getId(), "Carl");
			ssc.readSecret("Carl", aliceS.getId());
		} catch (Exception e){
			assertTrue(true); // exception is expected
		}
	}
}
